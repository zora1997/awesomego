// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomsClient is the client API for Rooms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomsClient interface {
	GetRooms(ctx context.Context, in *GetRoomsReq, opts ...grpc.CallOption) (*GetRoomsRsp, error)
	SetRooms(ctx context.Context, in *SetRoomsReq, opts ...grpc.CallOption) (*SetRoomsRsp, error)
}

type roomsClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomsClient(cc grpc.ClientConnInterface) RoomsClient {
	return &roomsClient{cc}
}

func (c *roomsClient) GetRooms(ctx context.Context, in *GetRoomsReq, opts ...grpc.CallOption) (*GetRoomsRsp, error) {
	out := new(GetRoomsRsp)
	err := c.cc.Invoke(ctx, "/Rooms/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) SetRooms(ctx context.Context, in *SetRoomsReq, opts ...grpc.CallOption) (*SetRoomsRsp, error) {
	out := new(SetRoomsRsp)
	err := c.cc.Invoke(ctx, "/Rooms/SetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomsServer is the server API for Rooms service.
// All implementations should embed UnimplementedRoomsServer
// for forward compatibility
type RoomsServer interface {
	GetRooms(context.Context, *GetRoomsReq) (*GetRoomsRsp, error)
	SetRooms(context.Context, *SetRoomsReq) (*SetRoomsRsp, error)
}

// UnimplementedRoomsServer should be embedded to have forward compatible implementations.
type UnimplementedRoomsServer struct {
}

func (UnimplementedRoomsServer) GetRooms(context.Context, *GetRoomsReq) (*GetRoomsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedRoomsServer) SetRooms(context.Context, *SetRoomsReq) (*SetRoomsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRooms not implemented")
}

// UnsafeRoomsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomsServer will
// result in compilation errors.
type UnsafeRoomsServer interface {
	mustEmbedUnimplementedRoomsServer()
}

func RegisterRoomsServer(s grpc.ServiceRegistrar, srv RoomsServer) {
	s.RegisterService(&Rooms_ServiceDesc, srv)
}

func _Rooms_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rooms/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).GetRooms(ctx, req.(*GetRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_SetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).SetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rooms/SetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).SetRooms(ctx, req.(*SetRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rooms_ServiceDesc is the grpc.ServiceDesc for Rooms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rooms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Rooms",
	HandlerType: (*RoomsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRooms",
			Handler:    _Rooms_GetRooms_Handler,
		},
		{
			MethodName: "SetRooms",
			Handler:    _Rooms_SetRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/room.proto",
}
